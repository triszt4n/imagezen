generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Album {
  id          String  @id @default(cuid())
  name        String
  description String?
  public      Boolean @default(false)

  photos Photo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users AlbumUser[]
}

enum Role {
  USER
  ADMIN
}

model AlbumUser {
  id   String @id @default(cuid())
  role Role   @default(USER)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String
}

model Photo {
  id       String @id @default(cuid())
  filename String
  mimeType String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  album   Album?  @relation(fields: [albumId], references: [id])
  albumId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  albums AlbumUser[]
  photos Photo[]

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
